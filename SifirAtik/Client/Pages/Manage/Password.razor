@page "/account/manage/password"
@layout ManageLayout

@inject IAuthService AuthService

<PageTitle>Change password</PageTitle>
<h3 class="mb-3">Change password</h3>

<EditForm Model="Input" FormName="change-password" OnValidSubmit="HandleSubmitAsync" method="post">
    <div class="row">
        <div class="col-md-6 mb-3">
            <DataAnnotationsValidator />
            <StatusMessage Message="@message" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.OldPassword" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your old password." />
                <label for="old-password" class="form-label">Old password</label>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.NewPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please enter your new password." />
                <label for="new-password" class="form-label">New password</label>
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Please confirm your new password." />
                <label for="confirm-password" class="form-label">Confirm password</label>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Update password</button>
        </div>
        <div class="col-md-4 col-md-offset-2">
            <section>
                <ValidationSummary class="text-danger" role="alert" />
            </section>
        </div>
    </div>
</EditForm>

@code {
    [CascadingParameter]
    private GetUserDto user { get; set; }

    private InputModel Input { get; set; } = new();

    private string? message;

    private async Task HandleSubmitAsync()
    {
        var dto = MapToDto();
        var result = await AuthService.UpdatePasswordAsync(dto);

        if (result.IsSuccess)
        {
            message = result.Message;
            StateHasChanged();

            await Task.Delay(500);
            await AuthService.LogoutAsync();
        }
        else
        {
            message = result.Message;
            StateHasChanged();
        }
    }

    private UpdatePasswordDto MapToDto()
    {
        return new UpdatePasswordDto
            {
                Guid = user.Guid,
                UpdatedById = user.Guid,
                OldPassword = Input.OldPassword,
                NewPassword = Input.NewPassword,
            };
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Old password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
