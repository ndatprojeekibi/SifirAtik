@page "/donations/new"

@layout DonateLayout

@inject IItemService ItemService
@inject IRequestService RequestService
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavigationManager

<PageTitle>New donation</PageTitle>
<h3 class="mb-3">New donation</h3>

<EditForm Model="Input" FormName="donation" OnValidSubmit="HandleSubmitAsync">
    <div class="row">
        <div class="col-md-6 mb-3">
            <DataAnnotationsValidator />
            <StatusMessage Message="@message" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Name" class="form-control" placeholder="Please enter the item name." />
                <label for="name" class="form-label">Item Name</label>
                @* <ValidationMessage For="() => Input.Name" class="text-danger" /> *@
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Description" class="form-control" placeholder="Please enter the item description." />
                <label for="description" class="form-label">Description</label>
                @* <ValidationMessage For="() => Input.Description" class="text-danger" /> *@
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Status" class="form-control" placeholder="Please enter the item status." />
                <label for="status" class="form-label">Status</label>
                @* <ValidationMessage For="() => Input.Status" class="text-danger" /> *@
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Location" class="form-control" placeholder="Please enter the item location." />
                <label for="location" class="form-label">Location</label>
                @* <ValidationMessage For="() => Input.Location" class="text-danger" /> *@
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Donate</button>

        </div>
        <div class="col-md-4 col-md-offset-2">
            <section>
                <ValidationSummary class="text-danger" role="alert" />
            </section>
        </div>
    </div>
</EditForm>


@code {
    private InputModel Input { get; set; } = new();
    private string? message;

    private async Task HandleSubmitAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var userId = Guid.Parse(state.User.FindFirst("UserId")?.Value);

        var dto = MapToDto(userId);
        var result = await ItemService.CreateAsync(dto);

        if (!result.IsSuccess)
        {
            message = result.Message;
            StateHasChanged();

            return;
        }

        var json = JsonSerializer.Serialize(result.Data);
        var item = JsonSerializer.Deserialize<GetItemDto>(json);

        var request = new CreateRequestDto
            {
                CreatedById = userId,
                RequestType = RequestType.Donation,
                ItemId = item.Guid,
            };

        result = await RequestService.CreateAsync(request);

        if (!result.IsSuccess)
        {
            message = result.Message;
            StateHasChanged();

            return;
        }

        message = result.Message;
        StateHasChanged();

        await Task.Delay(500);
        NavigationManager.NavigateTo("/donations", forceLoad: true);
    }

    private CreateItemDto MapToDto(Guid userId)
    {
        return new CreateItemDto
            {
                CreatedById = userId,
                Name = Input.Name,
                Description = Input.Description,
                Status = Input.Status,
                DonationLocation = Input.Location
            };
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Item Name")]
        public string? Name { get; set; }

        [Required]
        [StringLength(256, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Description")]
        public string? Description { get; set; }

        [Required]
        [StringLength(50, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Status")]
        public string? Status { get; set; }

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 1)]
        [Display(Name = "Location")]
        public string? Location { get; set; }
    }
}
